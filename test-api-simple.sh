#!/bin/bash

# Script para probar APIs simples del Sistema de Gesti√≥n de Archivos Excel
# Uso: ./test-api-simple.sh [URL_BASE]

# Configuraci√≥n
BASE_URL="${1:-http://localhost:5000}"
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üß™ Probando APIs del Sistema de Gesti√≥n de Archivos Excel${NC}"
echo -e "${BLUE}URL Base: $BASE_URL${NC}"
echo ""

# Funci√≥n para hacer peticiones y mostrar resultados
test_api() {
    local name="$1"
    local url="$2"
    local headers="$3"
    local expected_status="${4:-200}"
    
    echo -n "üîÑ Probando $name... "
    
    if [ -n "$headers" ]; then
        response=$(curl -s -w "%{http_code}" -H "$headers" "$url")
    else
        response=$(curl -s -w "%{http_code}" "$url")
    fi
    
    # Extraer c√≥digo de estado (√∫ltimos 3 caracteres)
    status_code="${response: -3}"
    # Extraer cuerpo de respuesta (todo excepto los √∫ltimos 3 caracteres)
    body="${response%???}"
    
    if [ "$status_code" = "$expected_status" ]; then
        echo -e "${GREEN}‚úÖ OK (HTTP $status_code)${NC}"
        if [ -n "$body" ] && command -v jq &> /dev/null; then
            echo "$body" | jq . 2>/dev/null | head -10
        else
            echo "$body" | head -5
        fi
    else
        echo -e "${RED}‚ùå FALLO (HTTP $status_code)${NC}"
        echo "Respuesta: $body"
    fi
    echo ""
}

# 1. Probar endpoint b√°sico
echo -e "${YELLOW}=== 1. Endpoint B√°sico (Sin Autenticaci√≥n) ===${NC}"
test_api "Endpoint ra√≠z" "$BASE_URL/"

# 2. Obtener token de prueba
echo -e "${YELLOW}=== 2. Obtener Token de Prueba ===${NC}"
token_response=$(curl -s "$BASE_URL/api/auth/test-token")
echo "üîÑ Obteniendo token de prueba..."

if echo "$token_response" | grep -q '"success":true'; then
    echo -e "${GREEN}‚úÖ Token obtenido exitosamente${NC}"
    
    # Extraer token usando diferentes m√©todos seg√∫n disponibilidad
    if command -v jq &> /dev/null; then
        TOKEN=$(echo "$token_response" | jq -r '.token')
    else
        # M√©todo alternativo sin jq
        TOKEN=$(echo "$token_response" | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
    fi
    
    echo "Token: ${TOKEN:0:50}..."
    echo ""
    
    # 3. Probar endpoints con autenticaci√≥n
    echo -e "${YELLOW}=== 3. Endpoints Protegidos (Con Token) ===${NC}"
    
    test_api "Perfil de usuario" "$BASE_URL/api/auth/me" "Authorization: Bearer $TOKEN"
    
    test_api "Listar √°reas" "$BASE_URL/api/areas" "Authorization: Bearer $TOKEN"
    
    test_api "M√©tricas de archivos" "$BASE_URL/api/files/metrics" "Authorization: Bearer $TOKEN"
    
    test_api "Estado de archivos" "$BASE_URL/api/file-status/metrics" "Authorization: Bearer $TOKEN"
    
else
    echo -e "${RED}‚ùå No se pudo obtener token de prueba${NC}"
    echo "Respuesta: $token_response"
    echo ""
    echo -e "${YELLOW}üí° Esto puede ser normal si no hay usuarios en la base de datos${NC}"
    echo -e "${YELLOW}   Intenta inicializar el sistema primero${NC}"
fi

# 4. Probar inicializaci√≥n del sistema
echo -e "${YELLOW}=== 4. Inicializaci√≥n del Sistema ===${NC}"
test_api "Inicializar sistema" "$BASE_URL/api/auth/init" "" "200"

# 5. Probar endpoints p√∫blicos adicionales
echo -e "${YELLOW}=== 5. Otros Endpoints P√∫blicos ===${NC}"

# Probar algunos endpoints que podr√≠an no requerir autenticaci√≥n
test_api "Healthcheck b√°sico" "$BASE_URL/health" "" "404"  # Esperamos 404 porque no existe

echo -e "${BLUE}üèÅ Pruebas completadas${NC}"
echo ""
echo -e "${YELLOW}üìù Notas:${NC}"
echo "‚Ä¢ Si el endpoint b√°sico funciona, Docker est√° corriendo correctamente"
echo "‚Ä¢ Si obtienes token, la base de datos est√° conectada"
echo "‚Ä¢ Si los endpoints protegidos funcionan, la autenticaci√≥n est√° OK"
echo "‚Ä¢ Los errores 404 en algunos endpoints son normales"
echo ""
echo -e "${YELLOW}üîß Para m√°s pruebas detalladas:${NC}"
echo "‚Ä¢ Revisa logs: docker-compose logs backend"
echo "‚Ä¢ Estado: docker-compose ps"
echo "‚Ä¢ Documentaci√≥n completa en: DEPLOY-DEBIAN.md" 